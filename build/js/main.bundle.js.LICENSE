/******/

// eslint-disable-next-line no-unused-vars

// while downloading

// timeout

// no update available

// other failure

// success

// Wrap deferred object in Promise to mark it as a well-handled Promise to

// avoid triggering uncaught exception warning in Chrome.

// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666

// at begin all updates modules are outdated

// the "outdated" status can propagate to parents if they don't accept the children

/** @type {TODO} */

/** @type {Error|false} */

// Store self accepted outdated modules to require them later by the module system

// removed self-accepted modules should not be required

// Now in "dispose" phase

// Call dispose handlers

// remove "parents" references from all children

// disable module (this disables requires from this module)

// remove module from cache

// when disposing there is no need to call dispose handler

// remove outdated dependency from module children

// Now in "apply" phase

// insert new code

// call accept handlers

// Load self accepted modules

// handle errors in accept handlers and self accepted module load

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// private stuff

// Module API

// Management API

//inherit from previous dispose call

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// __webpack_hash__

/************************************************************************/

/* 0 */

/***/

/* harmony export (binding) */

/* unused harmony export __decorate */

/* unused harmony export __param */

/* unused harmony export __metadata */

/* unused harmony export __exportStar */

/* unused harmony export __values */

/* unused harmony export __read */

/* unused harmony export __spread */

/* unused harmony export __await */

/* unused harmony export __asyncGenerator */

/* unused harmony export __asyncDelegator */

/* unused harmony export __asyncValues */

/* unused harmony export __makeTemplateObject */

/* unused harmony export __importStar */

/* unused harmony export __importDefault */

/* unused harmony export __classPrivateFieldGet */

/* unused harmony export __classPrivateFieldSet */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

/* 1 */

/* 2 */

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 3 */

/* WEBPACK VAR INJECTION */

/* unused harmony export checkDocument */

/* unused harmony export getDirectiveNames */

/* unused harmony export getDirectivesFromDocument */

/* unused harmony export getEnv */

/* unused harmony export getFragmentDefinition */

/* unused harmony export getInclusionDirectives */

/* unused harmony export getMutationDefinition */

/* unused harmony export getOperationDefinitionOrDie */

/* unused harmony export isDevelopment */

/* unused harmony export isEnv */

/* unused harmony export isNumberValue */

/* unused harmony export isScalarValue */

/* unused harmony export removeArgumentsFromDocument */

/* unused harmony export removeDirectivesFromDocument */

/* unused harmony export removeFragmentSpreadFromDocument */

/* unused harmony export stripSymbols */

/* unused harmony export valueFromNode */

/* unused harmony export valueToObjectRepresentation */

/* unused harmony export variablesInOperation */

/* unused harmony export warnOnceInDevelopment */

/* harmony import */

/*#__PURE__*/

/* 4 */

/* unused harmony export process */

/** @class */

// Code that uses ts-invariant with rollup-plugin-invariant may want to

// import this process stub to avoid errors evaluating process.env.NODE_ENV.

// However, because most ESM-to-CJS compilers will rewrite the process import

// as tsInvariant.process, which prevents proper replacement by minifiers, we

// also attempt to define the stub globally when it is not already defined.

// Using Function to evaluate this assignment in global scope also escapes

// the strict mode of the current module, thereby allowing the assignment.

// Inspired by https://github.com/facebook/regenerator/pull/369.

// The assignment can fail if a Content Security Policy heavy-handedly

// forbids Function usage. In those environments, developers should take

// extra care to replace process.env.NODE_ENV in their production builds,

// or define an appropriate global.process polyfill.

/* 5 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 6 */

/* 7 */

/* 8 */

/* 9 */

// EXPORTS

/* binding */

// EXTERNAL MODULE: ./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs

// CONCATENATED MODULE: ./node_modules/graphql/jsutils/defineToJSON.mjs

/**
 * The `defineToJSON()` function defines toJSON() and inspect() prototype
 * methods, if no function provided they become aliases for toString().
 */

/* istanbul ignore else (See: https://github.com/graphql/graphql-js/issues/2317) */

// CONCATENATED MODULE: ./node_modules/graphql/language/ast.mjs

/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */

/**
 * The character offset at which this Node begins.
 */

/**
 * The character offset at which this Node ends.
 */

/**
 * The Token at which this Node begins.
 */

/**
 * The Token at which this Node ends.
 */

/**
 * The Source document the AST represents.
 */

// Print a simplified form when appearing in JSON/util.inspect.

/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

/**
 * The kind of Token.
 */

/**
 * The 1-indexed line number on which this Token appears.
 */

/**
 * The 1-indexed column number at which this Token begins.
 */

/**
 * For non-punctuation tokens, represents the interpreted value of the token.
 */

/**
 * Tokens exist as nodes in a double-linked-list amongst all tokens
 * including ignored tokens. <SOF> is always the first node and <EOF>
 * the last.
 */

/**
 * @internal
 */

/**
 * The list of all possible AST node types.
 */

/* 10 */

/* 11 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 12 */

/* 13 */

// Thank's IE8 for his funny defineProperty

/* 14 */

/* empty */

/* 15 */

/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */

// If the two values are strictly equal, our job is easy.

// Object.prototype.toString returns a representation of the runtime type of

// the given value that is considerably more precise than typeof.

// If the runtime types of a and b are different, they could maybe be equal

// under some interpretation of equality, but for simplicity and performance

// we just return false instead.

// Arrays are a lot like other objects, but we can cheaply compare their

// lengths as a short-cut before comparing their elements.

// Fall through to object case...

// Now make sure they have the same keys.

// Finally, check deep equality of all child properties.

// Handle NaN, which is !== itself.

// Fall through to shared +a === +b case...

// If a instanceof Set, aValue === aKey.

// So this works the same way for both Set and Map.

// However, we care about deep equality of values only when dealing

// with Map structures.

// Otherwise the values are not equal.

// Though cyclic references can make an object graph appear infinite from the

// perspective of a depth-first traversal, the graph still contains a finite

// number of distinct object references. We use the previousComparisons cache

// to avoid comparing the same pair of object references more than once, which

// guarantees termination (even if we end up comparing every object in one

// graph to every object in the other graph, which is extremely unlikely),

// while still allowing weird isomorphic structures (like rings with different

// lengths) a chance to pass the equality test.

// Return true here because we can be sure false will be returned somewhere

// else if the objects are not equivalent.

/* unused harmony default export */

/* 16 */

/* 17 */

/* unused harmony export ApolloConsumer */

/* unused harmony export resetApolloContext */

//# sourceMappingURL=react-common.esm.js.map

/* 18 */

/* unused harmony export Observable */

/* harmony default export */

/* 19 */

// 7.1.13 ToObject(argument)

/* 20 */

/* unused harmony export QueryDocumentKeys */

/* unused harmony export visitInParallel */

/* unused harmony export getVisitFn */

// Note: fragment variable definitions are experimental and may be changed

// or removed in the future.

/**
 * visit() will walk through an AST using a depth first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */

/* eslint-disable no-undef-init */

/* eslint-enable no-undef-init */

/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */

/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */

// { Kind() {} }

// { Kind: { enter() {}, leave() {} } }

// { enter() {}, leave() {} }

// { enter: { Kind() {} }, leave: { Kind() {} } }

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 27 */

// UNUSED EXPORTS: parsePath

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// Test for strict equality first.

// Otherwise, if either of them == null they are not equal.

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

// eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

// IE 11 sometimes throws when accessing window.history.state

// See https://github.com/ReactTraining/history/pull/289

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

// Ignore extraneous popstate events in WebKit.

// TODO: We could probably make this more reliable by

// keeping a list of keys we've seen in sessionStorage.

// Instead, we just default to 0 for keys we don't know.

// Public interface

// We can't use window.location.hash here because it's not

// consistent across browsers - Firefox will pre-decode it!

// Ensure we always have a properly-encoded hash.

// A hashchange doesn't always == location change.

// Ignore this change; we already setState in push/replace.

// keeping a list of paths we've seen in sessionStorage.

// Instead, we just default to 0 for paths we don't know.

// Ensure the hash is encoded properly before doing anything else.

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// rather setState here and ignore the hashchange. The caveat here

// is that other hash histories in the page will consider it a POP.

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

/**
 * Creates a history object that stores locations in memory.
 */

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

/* 28 */

// eslint-disable-next-line no-useless-call

/* 29 */

// optional / simple context binding

/* 30 */

/* 31 */

// 7.1.4 ToInteger

/* 32 */

/* 33 */

// most Object methods by ES6 should accept primitives

/* 34 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 35 */

/* unused harmony export concat */

/* unused harmony export createOperation */

/* unused harmony export empty */

/* unused harmony export from */

/* unused harmony export fromPromise */

/* unused harmony export makePromise */

/* unused harmony export split */

/* unused harmony export toPromise */

//# sourceMappingURL=bundle.esm.js.map

/* 36 */

/* 37 */

/* 38 */

// 7.2.1 RequireObjectCoercible(argument)

/* 39 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 40 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 41 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 42 */

// UNUSED EXPORTS: MemoryRouter, Prompt, StaticRouter, generatePath, useHistory, useLocation, useParams, useRouteMatch, withRouter

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// This is a bit of a hack. We have to start listening for location

// changes here in the constructor in case there are any <Redirect>s

// on the initial render. If there are, they will replace/push when

// they mount and since cDM fires in children before parents, we may

// get a new location before the <Router> is mounted.

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * The public API for navigating programmatically with a component.
 */

// When rendering in a static context,

// set the new location immediately.

/**
 * Public API for matching a URL pathname to a path.
 */

// the path used to match

// the matched portion of the URL

// whether or not we matched exactly

/**
 * The public API for matching a single path and rendering.
 */

// Preact uses an empty array as children by

// default, so use null if that's the case.

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

// We use React.Children.forEach instead of React.Children.toArray().find()

// here because toArray adds keys to all child elements and we do not want

// to trigger an unmount/remount for two <Route>s that render the same

// component at different URLs.

/* 43 */

/* unused harmony export FetchType */

/* unused harmony export ObservableQuery */

/* unused harmony export isApolloError */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 48 */

/* 49 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 50 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 51 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 52 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 60 */

/* 61 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 62 */

/* 63 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 64 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 65 */

// ESM COMPAT FLAG

// CONCATENATED MODULE: ./src/app/pages/Dashboard.js

// CONCATENATED MODULE: ./src/app/pages/Login.js

// CONCATENATED MODULE: ./src/app/pages/NotFound.js

// EXTERNAL MODULE: ./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js

// CONCATENATED MODULE: ./src/app/queries/index.js

// CONCATENATED MODULE: ./src/app/Router.js

// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js

// CONCATENATED MODULE: ./src/app/styles/GlobalStyles.js

/* eslint-disable no-tabs */

// CONCATENATED MODULE: ./src/app/App.js

/* 66 */

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

/* 67 */

/* 68 */

/* istanbul ignore next (See: https://github.com/graphql/graphql-js/issues/2317) */

/* 69 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// React v16.11 and below

// React v16.12 and above

// don't hoist over string (html) components

// Avoid failures from read-only properties

/* 70 */

/* 71 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 72 */

/* 73 */

// 7.2.2 IsArray(argument)

/* 74 */

// eslint-disable-next-line no-throw-literal

/* 75 */

// 21.2.5.3 get RegExp.prototype.flags

/* 76 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 77 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 78 */

// fast case for arrays with default iterator

/* 79 */

/* 80 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 81 */

/* 82 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 83 */

/**
 * Used to print values in error messages.
 */

// $FlowFixMe(>=0.90.0)

// check for infinite recursion

/* 84 */

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */

// Expand a block string's raw value into independent lines.

// Remove common indentation from all lines but first.

// Remove leading and trailing blank lines.

// Return a string of the lines joined with U+000A.

/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

// Format a multi-line block quote to account for leading space.

/* unused harmony export getBlockStringIndentation */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

// IE 8- don't enum bug keys

/* 90 */

/* 91 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 92 */

/* 93 */

/* 94 */

/* 95 */

// 20.2.2.28 Math.sign(x)

/* 96 */

// 20.2.2.14 Math.expm1(x)

/* 97 */

// true  -> String#at

// false -> String#codePointAt

/* 98 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 99 */

// helper for String#{startsWith, endsWith, includes}

/* 100 */

// 7.2.8 IsRegExp(argument)

/* 101 */

/* 102 */

// check on default Array iterator

/* 103 */

/* 104 */

/* 105 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 106 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 107 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 108 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 109 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 110 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* unused harmony export RenderPromises */

/* unused harmony export useApolloClient */

/* unused harmony export useLazyQuery */

/* unused harmony export useMutation */

/* unused harmony export useSubscription */

//# sourceMappingURL=react-hooks.esm.js.map

/* 115 */

/* unused harmony export HashRouter */

/* unused harmony export Link */

/* unused harmony export NavLink */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

// onClick prevented default

// ignore everything but left clicks

// React 15 compat

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/* 116 */

/* 117 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

//

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

/* 118 */

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js

/* o */

/* n */

/* Z+1 */

// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js

/* 119 */

/* 120 */

/* 121 */

// Don't enum bug & hidden keys

/* 122 */

/* 123 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 124 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 125 */

// 7.2.9 SameValue(x, y)

/* 126 */

/* , ...args */

/* 127 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 128 */

/* 129 */

/* 130 */

/* 131 */

// 20.1.2.3 Number.isInteger(number)

/* 132 */

// 20.2.2.20 Math.log1p(x)

/* 133 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 134 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 135 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 136 */

/* 137 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 138 */

/* 139 */

/* 140 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 141 */

// may throw

// variable length - can't use forEach

// unwrap

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// constructor polyfill

// 25.4.3.1 Promise(executor)

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 142 */

// 25.4.1.5 NewPromiseCapability(C)

/* 143 */

/* 144 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 145 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 146 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 147 */

// all object keys, includes non-enumerable and symbols

/* 148 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 149 */

/* 150 */

/* 151 */

/* 152 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/* 153 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 154 */

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

/* 155 */

/* global window */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

// @flow

/* 160 */

/* unused harmony export ServerStyleSheet */

/* unused harmony export StyleSheetConsumer */

/* unused harmony export StyleSheetContext */

/* unused harmony export StyleSheetManager */

/* unused harmony export ThemeConsumer */

/* unused harmony export ThemeContext */

/* unused harmony export ThemeProvider */

/* unused harmony export __PRIVATE__ */

/* unused harmony export css */

/* unused harmony export isStyledComponent */

/* unused harmony export keyframes */

/* unused harmony export useTheme */

/* unused harmony export version */

/* unused harmony export withTheme */

// 

// $FlowFixMe

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 */

// eslint-disable-next-line

// Rehydrate componentId to group index mapping

// Rehydrate names and rules

// looks like: data-styled.g11[id="idA"]{content:"nameA,"}

// Avoid Edge bug where empty style elements don't create sheets

// Avoid Firefox quirk where the style element might not have a sheet property

// Avoid IE11 quirk where cssText is inaccessible on some invalid rules

// We rehydrate only once and use the sheet that is created first

/** Register a group ID to give it an index */

/** Lazily initialises a GroupedTag for when it's actually needed */

/** Check whether a name is known for caching */

/** Mark a group's name as known for caching */

/** Insert new rules which also marks the name as known */

/** Clears all cached names for a given group ID */

/** Clears all rules for a given group ID */

/** Clears the entire tag which deletes all rules but not its names */

// NOTE: This does not clear the names, since it's only used during SSR

// so that we can continuously output only new rules

/** Outputs the current sheet as a CSS string with markers for SSR */

// NOTE: It's easier to collect rules and have the marker

// after the actual rules to simplify the rehydration

/* Node.ELEMENT_TYPE */

/** Find last style element if any inside target */

// property

// @import

// selector

// at-rule

// @font-face, @page

// the first self-ref is always untouched

// there should be at least two self-refs to do a replacement (.b > .b)

// no consecutive self refs (.b.b); that is a precedence boost and treated differently

// stylis has no concept of state to be passed to plugins

// but since JS is single=threaded, we can rely on that to ensure

// these properties stay in sync with the current stylis run

// eslint-disable-next-line no-param-reassign

/**
 * inlined version of
 * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/hyphenateStyleName.js
 */

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */

/**
 * It's falsish not falsy because 0 is allowed.
 */

// https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133

/* Handle other components */

/* Either execute or defer the function */

/* Handle objects */

/* eslint-disable */

/**
  mixin-deep; https://github.com/jonschlinkert/mixin-deep
  Inlined such that it will be consistently transpiled to an IE-compatible syntax.

  The MIT License (MIT)

  Copyright (c) 2014-present, Jon Schlinkert.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

/* eslint-disable no-bitwise */

/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

/* input a number, usually a hash and convert it to base-52 */

/* get a char and divide by alphabet-length */

// functions are allowed to be static if they're just being

// used to get the classname of a nested styled component

/*
 ComponentStyle is all the CSS-specific stuff, not
 the React-specific stuff.
 */

// NOTE: This registers the componentId, which ensures a consistent order

// for this component's styles compared to others

/*
   * Flattens a rule set into valid CSS
   * Hashes it, wraps the whole chunk in a .hash1234 {}
   * Returns the hash to be injected on render()
   * */

// force dynamic classnames if user-supplied stylis plugins are in use

/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */

/**
 * Convenience function for joining strings to form className chains
 */

/* global $Call */

/* We depend on components having unique IDs */

// NOTE: can't memoize this

// returns [context, resolvedAttrs]

// where resolvedAttrs is only the things injected by the attrs themselves

/* eslint-disable guard-for-in */

/* eslint-enable guard-for-in */

// NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,

// but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it

// should be an immutable value, but behave for now.

// eslint-disable-next-line guard-for-in

// Don't pass through non HTML tags through to HTML elements

// Ensure that no displayName can lead to duplicate componentIds

// compose nested shouldForwardProp calls

// fold the underlying StyledComponent rules up (implicit extend)

/**
   * forwardRef creates a new interim component, which we'll take advantage of
   * instead of extending ParentComponent to create _another_ interim class
   */

// $FlowFixMe this is a forced cast to merge it StyledComponentWrapperProperties

// this static is used to preserve the cascade of static classes for component selector

// purposes; this is especially important with usage of the css prop

// fold the underlying StyledComponent target up since we folded the styles

// all SC-specific things should not be hoisted

// Thanks to ReactDOMFactories for this handy list!

/* This is callable directly as a template function */

// $FlowFixMe: Not typed to avoid destructuring arguments

/* If config methods are called, wrap up a new template function and merge options */

/* Modify/inject new props at runtime */

// Shorthands for all valid HTML Elements

// SVG

// NOTE: We use the id as a name as well, since these rules never change

// NOTE: Remove old styles, then inject the new ones

/* 161 */

// Test for A's keys different from B.

/* 162 */

/* 163 */

// SVG-related properties

/* 164 */

// UNUSED EXPORTS: HeuristicFragmentMatcher, IntrospectionFragmentMatcher, ObjectCache, StoreReader, StoreWriter, WriteError, assertIdValue, defaultDataIdFromObject, defaultNormalizedCacheFactory, enhanceErrorWithDocument

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js

// EXTERNAL MODULE: ./node_modules/apollo-utilities/lib/bundle.esm.js

// We use the Slot object iself as a key to its value, which means the

// value cannot be obtained without a reference to the Slot object.

// Cache the value in currentContext.slots so the next lookup will

// be faster. This caching is safe because the tree of contexts and

// the values of the slots are logically immutable.

// If a value was not found for this Slot, it's never going to be found

// no matter how many times we look it up, so we might as well cache

// the absence of the value, too.

// Given the prevalence of arrow functions, specifying arguments is likely

// to be much more common than specifying `this`, hence this ordering:

// Function.prototype.apply allows the arguments array argument to be

// omitted or undefined, so args! is fine here.

// Capture the current context and wrap a callback function so that it

// reestablishes the captured context when called.

// Immediately run a callback function without any captured context.

// If you have a Slot object, you can find out its slot.id, but you cannot

// guess the slot.id of a Slot you don't have access to, thanks to the

// randomized suffix.

// EXTERNAL MODULE: ./node_modules/@wry/equality/lib/equality.esm.js

// CONCATENATED MODULE: ./node_modules/@wry/context/lib/context.esm.js

// This currentContext variable will only be used if the makeSlotClass

// function is called, which happens only if this is the first copy of the

// @wry/context package to be imported.

//# sourceMappingURL=context.esm.js.map

// CONCATENATED MODULE: ./node_modules/optimism/lib/bundle.esm.js

// Since this package might be used browsers, we should avoid using the

// Node built-in assert module.

// This is the most important method of the Entry API, because it

// determines whether the cached this.value can be returned immediately,

// or must be recomputed. The overall performance of the caching system

// depends on the truth of the following observations: (1) this.dirty is

// usually false, (2) this.dirtyChildren is usually null/empty, and thus

// (3) valueGet(this.value) is usually returned without recomputation.

// Since this recomputation is likely to re-remember some of this

// entry's children, we forget our children here but do not call

// maybeReportOrphan until after the recomputation finishes.

// Set entry as the parent entry while calling recomputeNewValue(entry).

// Prevent double subscriptions.

// If this Entry has a subscribe function and it threw an exception

// (or an unsubscribe function it previously returned now throws),

// return false to indicate that we were not able to subscribe (or

// unsubscribe), and this Entry should remain dirty.

// Returning true indicates either that there was no entry.subscribe

// function or that it succeeded.

// If we successfully recomputed entry.value and did not fail to

// (re)subscribe, then this Entry is no longer explicitly dirty.

// Now that we've had a chance to re-remember any children that were

// involved in the recomputation, we can safely report any orphan

// children that remain.

// We can go ahead and unsubscribe here, since any further dirty

// notifications we receive will be redundant, and unsubscribing may

// free up some resources, e.g. file watchers.

// Because this entry has been kicked out of the cache (in index.js),

// we've lost the ability to find out if/when this entry becomes dirty,

// whether that happens through a subscription, because of a direct call

// to entry.setDirty(), or because one of its children becomes dirty.

// Because of this loss of future information, we have to assume the

// worst (that this entry might have become dirty very soon), so we must

// immediately mark this entry's parents as dirty. Normally we could

// just call entry.setDirty() rather than calling parent.setDirty() for

// each parent, but that would leave this entry in parent.childValues

// and parent.dirtyChildren, which would prevent the child from being

// truly forgotten.

// When this Entry has children that are dirty, this property becomes

// a Set containing other Entry objects, borrowed from emptySetPool.

// When the set becomes empty, it gets recycled back to emptySetPool.

// Set entry.value as unknown.

// If entry.fn succeeds, entry.value will become a normal Value.

// If entry.fn throws, entry.value will become exceptional.

// Either way, this line is always reached.

// Let a parent Entry know that one of its children may be dirty.

// Must have called rememberParent(child) before calling

// reportDirtyChild(parent, child).

// If we already know this child is dirty, then we must have already

// informed our own parents that we are dirty, so we can terminate

// the recursion early.

// Let a parent Entry know that one of its children is no longer dirty.

// Must have called rememberChild(child) before calling

// reportCleanChild(parent, child).

// Unknown values are not equal to each other.

// Both values must be ordinary (or both exceptional) to be equal.

// The underlying value or exception must be the same.

// If the given entry has a reportOrphan method, and no remaining parents,

// call entry.reportOrphan and return true iff it returns true. The

// reportOrphan function should return true to indicate entry.dispose()

// has been called, and the entry has been removed from any other caches

// (see index.js for the only current example).

// Removes all children from this entry and returns an array of the

// removed children.

// After we forget all our children, this.dirtyChildren must be empty

// and therefore must have been reset to null.

// A trie data structure that holds object keys weakly, yet can also hold

// non-object keys, unlike the native `WeakMap`.

// Fall through to return true...

// The defaultMakeCacheKey function is remarkably powerful, because it gives

// a unique object for any shallow-identical list of arguments. If you need

// to implement a custom makeCacheKey function, you may find it helpful to

// delegate the final work to defaultMakeCacheKey, which is why we export it

// here. However, you may want to avoid defaultMakeCacheKey if your runtime

// does not support WeakMap, or you have the ability to return a string key.

// In those cases, just write your own custom makeCacheKey functions.

// Move this entry to the front of the least-recently used queue,

// since we just finished computing its value.

// If options.disposable is truthy, the caller of wrap is telling us

// they don't care about the result of entry.recompute(), so we should

// avoid returning the value, so it won't be accidentally used.

// Clean up any excess entries in the cache, but only if there is no

// active parent entry, meaning we're not in the middle of a larger

// computation that might be flummoxed by the cleaning.

// EXTERNAL MODULE: ./node_modules/ts-invariant/lib/invariant.esm.js

// CONCATENATED MODULE: ./node_modules/apollo-cache-inmemory/lib/bundle.esm.js

/* 165 */

// UNUSED EXPORTS: HttpLink

// EXTERNAL MODULE: ./node_modules/apollo-link/lib/bundle.esm.js

// TODO: provide better type coverage in future

// Document

// Anonymous queries with no directives or variable definitions can use

// the query short form.

// Fragments

// Value

// Directive

// Type

// Type System Definitions

/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */

/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */

/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise
 * print an empty string.
 */

// CONCATENATED MODULE: ./node_modules/apollo-link-http-common/lib/bundle.esm.js

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 170 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 171 */

/* 172 */

// all enumerable object keys, includes symbols

/* 173 */

/* 174 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 175 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 176 */

/* 177 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 178 */

// 19.1.2.14 Object.keys(O)

/* 179 */

/* 180 */

// 19.1.2.5 Object.freeze(O)

/* 181 */

// 19.1.2.17 Object.seal(O)

/* 182 */

// 19.1.2.15 Object.preventExtensions(O)

/* 183 */

// 19.1.2.12 Object.isFrozen(O)

/* 184 */

// 19.1.2.13 Object.isSealed(O)

/* 185 */

// 19.1.2.11 Object.isExtensible(O)

/* 186 */

// 19.1.3.1 Object.assign(target, source)

/* 187 */

// 19.1.3.10 Object.is(value1, value2)

/* 188 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 189 */

// 19.1.3.6 Object.prototype.toString()

/* 190 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 191 */

// 19.2.4.2 name

/* 192 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 193 */

// 18.2.5 parseInt(string, radix)

/* 194 */

// 18.2.4 parseFloat(string)

/* 195 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 196 */

// V8 ~ Android 4.3-

/* 197 */

// IE7-

/* 198 */

// 20.1.2.1 Number.EPSILON

/* 199 */

// 20.1.2.2 Number.isFinite(number)

/* 200 */

/* 201 */

// 20.1.2.4 Number.isNaN(number)

/* 202 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 203 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 204 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 205 */

// 20.1.2.12 Number.parseFloat(string)

/* 206 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 207 */

// 20.2.2.3 Math.acosh(x)

/* 208 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 209 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 210 */

// 20.2.2.9 Math.cbrt(x)

/* 211 */

// 20.2.2.11 Math.clz32(x)

/* 212 */

// 20.2.2.12 Math.cosh(x)

/* 213 */

/* 214 */

// 20.2.2.16 Math.fround(x)

/* 215 */

/* 216 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 217 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 218 */

// 20.2.2.21 Math.log10(x)

/* 219 */

/* 220 */

// 20.2.2.22 Math.log2(x)

/* 221 */

/* 222 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 223 */

// 20.2.2.33 Math.tanh(x)

/* 224 */

// 20.2.2.34 Math.trunc(x)

/* 225 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 226 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 227 */

// 21.1.3.25 String.prototype.trim()

/* 228 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 229 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 230 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 231 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 232 */

// 21.1.3.13 String.prototype.repeat(count)

/* 233 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 234 */

// B.2.3.2 String.prototype.anchor(name)

/* 235 */

// B.2.3.3 String.prototype.big()

/* 236 */

// B.2.3.4 String.prototype.blink()

/* 237 */

// B.2.3.5 String.prototype.bold()

/* 238 */

// B.2.3.6 String.prototype.fixed()

/* 239 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 240 */

// B.2.3.8 String.prototype.fontsize(size)

/* 241 */

// B.2.3.9 String.prototype.italics()

/* 242 */

// B.2.3.10 String.prototype.link(url)

/* 243 */

// B.2.3.11 String.prototype.small()

/* 244 */

// B.2.3.12 String.prototype.strike()

/* 245 */

// B.2.3.13 String.prototype.sub()

/* 246 */

// B.2.3.14 String.prototype.sup()

/* 247 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 248 */

/* 249 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 255 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 256 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 257 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 258 */

// fallback for not array-like ES3 strings and DOM objects

/* 259 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 260 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 261 */

// cross-realm fallback

/* 262 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 263 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 264 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 265 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 266 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 267 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 268 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 269 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 270 */

/* 271 */

/* 272 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 273 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 274 */

/* 275 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 276 */

// 21.2.5.14 RegExp.prototype.toString()

/* 277 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 278 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 279 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 280 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 281 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 282 */

/* 283 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 284 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 285 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 286 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 287 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 288 */

/* 289 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 299 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 300 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 301 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 302 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 303 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 304 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 305 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 306 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 307 */

// 26.1.10 Reflect.isExtensible(target)

/* 308 */

// 26.1.11 Reflect.ownKeys(target)

/* 309 */

// 26.1.12 Reflect.preventExtensions(target)

/* 310 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 311 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 312 */

/* 313 */

// https://github.com/tc39/Array.prototype.includes

/* 314 */

/* 315 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 316 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 317 */

/* 318 */

/* , fillString = ' ' */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 329 */

/* 330 */

// https://github.com/tc39/proposal-object-values-entries

/* 331 */

/* 332 */

/* 333 */

/* 334 */

// https://github.com/tc39/proposal-promise-finally

/* 335 */

/* 336 */

// ie9- setTimeout & setInterval additional parameters fix

/* 337 */

/* 338 */

// TODO: Not spec compliant, should be false.

/* 339 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 340 */

/* 341 */

// https://github.com/tc39/proposal-global

/* 342 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/*eslint-env browser*/

/*global __resourceQuery __webpack_public_path__*/

// cache the wrapper for other entries loaded on

// the same page with the same options.path

// fall through

// the reporter needs to be a singleton on the page

// in case the client is being used by multiple bundles

// we only want to report once.

// all the errors will go to all clients

/* istanbul ignore next */

// NOTE: console.warn or console.error will print the stack trace

// which isn't helpful here, so using console.log to escape it.

/* 354 */

// module.parent = undefined by default

/* 355 */

/* 356 */

/* 357 */

/* 358 */

// Reference to https://github.com/sindresorhus/ansi-regex

// [FOREGROUD_COLOR, BACKGROUND_COLOR]

// bold

// dim

// italic

// underscore

// hidden

// reset italic

// reset underscore

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */

// Returns the text if the string has no ANSI escape code.

// Cache opened sequence.

// If current sequence has been opened, close it.

// eslint-disable-line no-extra-boolean-cast

// Open tag.

// Pop sequence

// Replace with markup.

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */

// reset all

// inverse

// dark grey

/**
 * Reset colors.
 */

/**
 * Expose tags, including open and close.
 * @type {Object}
 */

/* 359 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

// eslint-disable-line max-len

// webpack 2 promise

// HotModuleReplacement.runtime.js refers to the result as `outdatedModules`

/* 364 */

/* 365 */

/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 366 */

/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* 367 */

/* 368 */

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 369 */

// Strip insignificant whitespace

// Note that this could do a lot more, such as reorder fields etc.

// A map docString -> graphql document

// A map fragmentName -> [normalized source]

// Take a unstripped parsed document (query/mutation or even fragment), and

// check all fragment definitions, checking for name->source uniqueness.

// We also want to make sure only unique fragments exist in the document.

// check that all "new" fragments inside the documents are consistent with

// existing fragments of the same name

// We don't want to remove the root loc field so we can use it

// for fragment substitution (see below)

// https://github.com/apollographql/graphql-tag/issues/40

// We know something about this fragment

// this is a problem because the app developer is trying to register another fragment with

// the same name as one previously registered. So, we tell them about it.

// XXX This should eventually disallow arbitrary string interpolation, like Relay does

// Support typescript, which isn't as nice as Babel about default exports

// For testing.

/* 370 */

/* 371 */

// === Symbol Support ===

// === Abstract Operations ===

// ASSERT: observer is an object

// ASSERT: subscriber is callable

/* 372 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

/* 373 */

/* 374 */

/* 375 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 376 */

// EXTERNAL MODULE: ./node_modules/graphql/jsutils/inspect.mjs

// CONCATENATED MODULE: ./node_modules/graphql/jsutils/devAssert.mjs

/* istanbul ignore else (see transformation done in './resources/inlineInvariant.js') */

// CONCATENATED MODULE: ./node_modules/graphql/jsutils/isObjectLike.mjs

/**
 * Return true if `value` is object-like. A value is object-like if it's not
 * `null` and has a `typeof` result of "object".
 */

// CONCATENATED MODULE: ./node_modules/graphql/polyfills/symbols.mjs

// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator

// $FlowFixMe Flow doesn't define `Symbol.toStringTag` yet

// In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator

// CONCATENATED MODULE: ./node_modules/graphql/language/location.mjs

/**
 * Represents a location in a Source.
 */

/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */

// CONCATENATED MODULE: ./node_modules/graphql/language/printLocation.mjs

/**
 * Render a helpful description of the location in the GraphQL Source document.
 */

// Special case for minified documents

// Lines specified like this: ["prefix", "string"],

// CONCATENATED MODULE: ./node_modules/graphql/error/GraphQLError.mjs

// FIXME:

// flowlint uninitialized-instance-property:off

/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */

/**
   * A message describing the Error for debugging purposes.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   *
   * Note: should be treated as readonly, despite invariant usage.
   */

/**
   * An array of { line, column } locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

/**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

/**
   * An array of GraphQL AST Nodes corresponding to this error.
   */

/**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */

/**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */

/**
   * The original error thrown from a field resolver during execution.
   */

/**
   * Extension fields to add to the formatted error.
   */

// Compute list of blame nodes.

// Compute locations in the source for the given nodes/positions.

// Include (non-enumerable) stack trace.

// By being enumerable, JSON.stringify will include `message` in the

// resulting output. This ensures that the simplest possible GraphQL

// service adheres to the spec.

// Coercing falsy values to undefined ensures they will not be included

// in JSON.stringify() when not provided.

// By being enumerable, JSON.stringify will include `locations` in the

// By being enumerable, JSON.stringify will include `path` in the

/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 */

// CONCATENATED MODULE: ./node_modules/graphql/error/syntaxError.mjs

/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */

// FIXME: workaround to not break chai comparisons, should be remove in v16

// $FlowFixMe Flow doesn't support computed properties yet

// CONCATENATED MODULE: ./node_modules/graphql/language/kinds.mjs

/**
 * The set of allowed kind values for AST nodes.
 */

// Name

// Values

// Directives

// Types

// Type Definitions

// Directive Definitions

// Type System Extensions

// Type Extensions

/**
 * The enum type representing the possible kind values of AST nodes.
 */

// CONCATENATED MODULE: ./node_modules/graphql/language/source.mjs

/**
 * A representation of source input to GraphQL.
 * `name` and `locationOffset` are optional. They are useful for clients who
 * store GraphQL documents in source files; for example, if the GraphQL input
 * starts at line 40 in a file named Foo.graphql, it might be useful for name to
 * be "Foo.graphql" and location to be `{ line: 40, column: 0 }`.
 * line and column in locationOffset are 1-indexed
 */

// Request Definitions

/**
   * The previously focused non-ignored token.
   */

/**
   * The currently focused non-ignored token.
   */

/**
   * The (1-indexed) line containing the current token.
   */

/**
   * The character offset at which the current line begins.
   */

/**
   * Advances the token stream to the next non-ignored token.
   */

/**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */

// Note: next is only mutable during parsing, so we cast to allow this.

// CONCATENATED MODULE: ./node_modules/graphql/language/directiveLocation.mjs

/**
 * The set of allowed directive location values.
 */

// NaN/undefined represents access beyond the end of the file.

// Trust JSON for ASCII.

// Otherwise print the escaped form.

/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */

/**
 * Reads from body starting at startPosition until it finds a non-whitespace
 * character, then returns the position of that character for lexing.
 */

// tab | space | comma | BOM

// new line

// carriage return

/**
 * Reads a comment token from the source file.
 *
 * #[\u0009\u0020-\uFFFF]*
 */

// SourceCharacter

// !

// #

// SourceCharacter but not LineTerminator

/**
 * Reads a number token from the source file, either a float
 * or an int depending on whether a decimal point appears.
 *
 * Int:   -?(0|[1-9][0-9]*)
 * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
 */

// $

// &

// (

// )

// .

// :

// =

// @

// [

// ]

// {

// |

// }

// A-Z _ a-z

/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * [_A-Za-z][_0-9A-Za-z]*
 */

// _

// 0-9

// A-Z

// _ A-Z a-z

// - 0-9

// -

// 0

// E e

// + -

// Numbers cannot be followed by . or NameStart

// CONCATENATED MODULE: ./node_modules/graphql/language/parser.mjs

/**
 * Configuration options to control parser behavior
 */

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */

/**
 * Returns the new position in the source after reading digits.
 */

// "

/**
 * Reads a block string token from the source file.
 *
 * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
 */

// Closing Triple-Quote (""")

// Escape Triple-Quote (\""")

/**
 * Converts four hexadecimal chars to the integer that the
 * string represents. For example, uniCharCode('0','0','0','f')
 * will return 15, and uniCharCode('0','0','f','f') returns 255.
 *
 * Returns a negative number on error, if a char was invalid.
 *
 * This is implemented by noting that char2hex() returns -1 on error,
 * which means the result of ORing the char2hex() will also be negative.
 */

/**
 * Reads a string token from the source file.
 *
 * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
 */

// not LineTerminator

// Closing Quote (")

// \

// uXXXX

/**
 * Converts a hex character to its integer value.
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 on error.
 */

/**
 * Report a message that an unexpected character was encountered.
 */

// 0 - 9

/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */

/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */

/**
   * Converts a name lex token into a name parse node.
   */

// Implements the parsing rules in the Document section.

/**
   * Document : Definition+
   */

/**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   */

// Implements the parsing rules in the Operations section.

/**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */

/**
   * OperationType : one of query mutation subscription
   */

/**
   * VariableDefinitions : ( VariableDefinition+ )
   */

/**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */

/**
   * Variable : $ Name
   */

/**
   * SelectionSet : { Selection+ }
   */

/**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */

/**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */

/**
   * Arguments[Const] : ( Argument[?Const]+ )
   */

/**
   * Argument[Const] : Name : Value[?Const]
   */

// Implements the parsing rules in the Fragments section.

/**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */

/**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */

// Experimental support for defining variables within fragments changes

// the grammar of FragmentDefinition:

//   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

/**
   * FragmentName : Name but not `on`
   */

// Implements the parsing rules in the Values section.

/**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */

/**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */

/**
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   */

/**
   * ObjectField[Const] : Name : Value[?Const]
   */

// Implements the parsing rules in the Directives section.

/**
   * Directives[Const] : Directive[?Const]+
   */

/**
   * Directive[Const] : @ Name Arguments[?Const]?
   */

// Implements the parsing rules in the Types section.

/**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */

/**
   * NamedType : Name
   */

// Implements the parsing rules in the Type Definition section.

/**
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */

// Many definitions begin with a description and require a lookahead.

/**
   * Description : StringValue
   */

/**
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   */

/**
   * OperationTypeDefinition : OperationType : NamedType
   */

/**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */

/**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */

/**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */

// Optional leading ampersand

// Legacy support for the SDL?

/**
   * FieldsDefinition : { FieldDefinition+ }
   */

/**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */

/**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */

/**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */

/**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */

/**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */

/**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */

// Optional leading pipe

/**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */

/**
   * EnumValuesDefinition : { EnumValueDefinition+ }
   */

/**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   *
   * EnumValue : Name
   */

/**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */

/**
   * InputFieldsDefinition : { InputValueDefinition+ }
   */

/**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */

/**
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   */

/**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */

/**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */

/**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */

/**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */

/**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */

/**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */

/**
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   */

/**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */

/*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */

// Core parsing utility functions

/**
   * Returns a location object, used to identify the place in
   * the source that created a given parsed object.
   */

/**
   * Determines if the next token is of a given kind
   */

/**
   * If the next token is of the given kind, return that token after advancing
   * the lexer. Otherwise, do not change the parser state and throw an error.
   */

/**
   * If the next token is of the given kind, return that token after advancing
   * the lexer. Otherwise, do not change the parser state and return undefined.
   */

/**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */

/**
   * If the next token is a given keyword, return "true" after advancing
   * the lexer. Otherwise, do not change the parser state and return "false".
   */

/**
   * Helper function for creating an error when an unexpected lexed token
   * is encountered.
   */

/**
   * Returns a possibly empty list of parse nodes, determined by
   * the parseFn. This list begins with a lex token of openKind
   * and ends with a lex token of closeKind. Advances the parser
   * to the next lex token after the closing token.
   */

/**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always
   * return non-empty list that begins with a lex token of openKind and ends
   * with a lex token of closeKind. Advances the parser to the next lex token
   * after the closing token.
   */

/**
   * Returns a non-empty list of parse nodes, determined by
   * the parseFn. This list begins with a lex token of openKind
   * and ends with a lex token of closeKind. Advances the parser
   * to the next lex token after the closing token.
   */

/**
 * A helper function to describe a token as a string for debugging
 */

/**
 * A helper function to describe a token kind as a string for debugging
 */
